[build-system]
build-backend = "hatchling.build"
requires = [
  "hatchling",
]

[project]
name = "pytoil"
version = "0.41.0"
description = "CLI to automate the development workflow."
readme = "README.md"
keywords = [
  "automation",
  "cli",
  "developer-tools",
  "python",
]
license = { text = "Apache Software License 2.0" }
maintainers = [
  { name = "Tom Fleet" },
  { email = "tomfleet2018@gmail.com" },
]
authors = [
  { name = "Tom Fleet" },
  { email = "tomfleet2018@gmail.com" },
]
requires-python = ">=3.9"
classifiers = [
  "Development Status :: 3 - Alpha",
  "Environment :: Console",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: Apache Software License",
  "Natural Language :: English",
  "Operating System :: MacOS :: MacOS X",
  "Operating System :: Microsoft :: Windows",
  "Operating System :: OS Independent",
  "Operating System :: POSIX :: Linux",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: Software Development",
  "Topic :: Utilities",
  "Typing :: Typed",
]
dependencies = [
  "click==8.1.7",
  "cookiecutter==2.6",
  "copier==9.3.1",
  "httpx==0.27",
  "humanize==4.10",
  "pydantic==2.8.2",
  "pyyaml==6.0.2",
  "questionary==2.0.1",
  "rich==13.7.1",
  "rtoml==0.11",
  "thefuzz[speedup]==0.22.1",
  "virtualenv==20.26.3",
]

urls.Documentation = "https://FollowTheProcess.github.io/pytoil/"
urls.Homepage = "https://github.com/FollowTheProcess/pytoil"
urls.Source = "https://github.com/FollowTheProcess/pytoil"
scripts.pytoil = "pytoil.cli.root:main"

[tool.ruff]
line-length = 120

lint.select = [
  "A",   # Don't shadow builtins
  "ANN", # Type annotations
  "ARG", # Unused arguments
  "B",   # Flake8 bugbear
  "BLE", # No blind excepts
  "C4",  # Flake8 comprehensions
  "C90", # Complexity
  # https://github.com/charliermarsh/ruff#supported-rules
  "E",   # Pycodestyle errors
  "ERA", # Commented out code
  "F",   # Pyflakes errors
  "I",   # Isort
  "INP", # No implicit namespace packages (causes import errors)
  "N",   # PEP8 naming
  "PGH", # Pygrep hooks
  "PIE", # Flake8 pie
  "PT",  # Pytest style
  "PTH", # Use pathlib over os.path
  "RET", # Function returns
  "RSE", # When raising an exception chain, use from
  "RUF", # Ruff specific rules
  "S",   # Bandit (security)
  "SIM", # Simplify
  "SLF", # Flake8-self, private member access
  "T20", # No print statements
  "TCH", # Stuff for typing is behind an if TYPE_CHECKING block
  "UP",  # All pyupgrade rules
  "W",   # Pycodestyle warnings
  "YTT", # Flake8 2020
]
lint.ignore = [
  "ANN101", # Missing type annotation for self in method
  "S105",   # Hardcoded passwords (lots of false positives)
  "S106",   # Hardcoded passwords (again?)
  "S603",   # Subprocess calls
]

lint.per-file-ignores."conftest.py" = [
  "TCH", # Conftest is only run for tests (with dev dependencies)
]
lint.per-file-ignores."tests/**/*.py" = [
  "ARG001", # Thinks pytest fixtures are unused arguments
  "D104",   # Missing docstring in __init__.py in tests (which is fine)
  "FBT001", # Tests are allowed positional bools (fixtures etc.)
  "S",      # Security stuff in tests is fine
  "S101",   # Assert is allowed in tests (obviously)
  "SLF001", # Private member access in tests is fine
  "TCH",    # Tests will be run with dev dependencies so we don't care
]
lint.isort.required-imports = [
  "from __future__ import annotations",
]
lint.mccabe.max-complexity = 15

[tool.codespell]
skip = "*.svg"
ignore-words-list = "ines,Ines"

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
  "-ra",
  "--strict-markers",
  "--strict-config",
]
xfail_strict = true
filterwarnings = [
  "error",
  "ignore::DeprecationWarning", # DeprecationWarning: read_binary is deprecated. Use files() instead. Comes from virtualenv
]
log_cli_level = "info"
pythonpath = [
  "src",
]
testpaths = [
  "tests",
]

[tool.coverage.run]
plugins = [
  "covdefaults",
]
omit = [
  "src/pytoil/cli/*.py",
  "src/pytoil/starters/base.py",
  "src/pytoil/exceptions.py",
]

[tool.coverage.report]
fail_under = 95
exclude_lines = [
  "def __repr__",
  "except ImportError",
]

[tool.mypy]
files = [
  "**/*.py",
]
python_version = "3.9"
ignore_missing_imports = true
strict = true
pretty = true
disallow_untyped_decorators = false
plugins = "pydantic.mypy"
show_error_codes = true
warn_unreachable = true
enable_error_code = [
  "ignore-without-code",
  "redundant-expr",
  "truthy-bool",
]

[tool.uv]
dev-dependencies = [
  "covdefaults",
  "coverage[toml]",
  "freezegun",
  "mkdocs",
  "mkdocs-material",
  "mypy",
  "nox",
  "pre-commit",
  "pytest",
  "pytest-clarity",
  "pytest-cov",
  "pytest-httpx",
  "pytest-mock",
  "pytest-randomly",
  "ruff",
  "types-click",
  "types-pyyaml",
]
