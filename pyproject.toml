[build-system]
build-backend = "hatchling.build"
requires = [
  "hatchling",
]

[project]
name = "pytoil"
version = "0.38.0"
description = "CLI to automate the development workflow."
readme = "README.md"
keywords = [
  "automation",
  "cli",
  "developer-tools",
  "python",
]
license = { text = "Apache Software License 2.0" }
maintainers = [ { name = "Tom Fleet" }, { email = "tomfleet2018@gmail.com" } ]
authors = [ { name = "Tom Fleet" }, { email = "tomfleet2018@gmail.com" } ]
requires-python = ">=3.9"
classifiers = [
  "Development Status :: 3 - Alpha",
  "Environment :: Console",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: Apache Software License",
  "Natural Language :: English",
  "Operating System :: MacOS :: MacOS X",
  "Operating System :: POSIX :: Linux",
  "Operating System :: Microsoft :: Windows",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Topic :: Software Development",
  "Topic :: Utilities",
  "Typing :: Typed",
]
dependencies = [
  "click==8.1.3",
  "cookiecutter==2.1.1",
  "copier==7.0.1",
  "httpx==0.23.3",
  "humanize==4.6",
  "pydantic==1.10.4",
  "PyYAML==6",
  "questionary==1.10",
  "rich==13.3.1",
  "rtoml==0.9",
  "thefuzz[speedup]==0.19",
  'typing_extensions==4.4; python_version <= "3.9"',
  "virtualenv==20.19",
]
[project.optional-dependencies]
dev = [
  "black==23.1",
  "build==0.10",
  "covdefaults==2.2.2",
  "coverage[toml]==7.1",
  "freezegun==1.2.2",
  "mkdocs==1.4.2",
  "mkdocs-material==9.0.12",
  "mypy==1",
  "nox==2022.11.21",
  "pre-commit==3.0.4",
  "pytest==7.2.1",
  "pytest-clarity==1.0.1",
  "pytest-cov==4",
  "pytest-httpx==0.21.3",
  "pytest-mock==3.10",
  "pytest-randomly==3.12",
  "ruff==0.0.246",
  "types-click==7.1.8",
  "types-PyYAML==6.0.12.6",
]
[project.urls]
Documentation = "https://FollowTheProcess.github.io/pytoil/"
Homepage = "https://github.com/FollowTheProcess/pytoil"
Source = "https://github.com/FollowTheProcess/pytoil"
[project.scripts]
pytoil = "pytoil.cli.root:main"

[tool.isort]
profile = "black"

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [ "-ra", "--strict-markers", "--strict-config" ]
xfail_strict = true
filterwarnings = [
  "error",
  "ignore::DeprecationWarning", # DeprecationWarning: read_binary is deprecated. Use files() instead. Comes from virtualenv
]
log_cli_level = "info"
pythonpath = [ "src" ]
testpaths = [ "tests" ]

[tool.coverage.run]
plugins = [ "covdefaults" ]
omit = [
  "src/pytoil/cli/*.py",
  "src/pytoil/starters/base.py",
  "src/pytoil/exceptions.py",
]

[tool.coverage.report]
fail_under = 95
exclude_lines = [ "def __repr__", "except ImportError" ]

[tool.mypy]
files = [ "**/*.py" ]
python_version = "3.11"
ignore_missing_imports = true
strict = true
pretty = true
disallow_untyped_decorators = false
plugins = "pydantic.mypy"
show_error_codes = true
warn_unreachable = true
enable_error_code = [ "ignore-without-code", "redundant-expr", "truthy-bool" ]

[tool.ruff]
line-length = 120
select = [
  # https://github.com/charliermarsh/ruff#supported-rules
  "E",   # Pycodestyle errors
  "F",   # Pyflakes errors
  "W",   # Pycodestyle warnings
  "UP",  # All pyupgrade rules
  "N",   # PEP8 naming
  "I",   # Isort
  "C90", # Complexity
  "C4",  # Flake8 comprehensions
  "ERA", # Commented out code
  "B",   # Flake8 bugbear
  "RUF", # Ruff specific rules
  "YTT", # Flake8 2020
  "ANN", # Type annotations
  "BLE", # No blind excepts
  "PT",  # Pytest style
  "RET", # Function returns
  "SIM", # Simplify
  "ARG", # Unused arguments
  "PTH", # Use pathlib over os.path
  "PGH", # Pygrep hooks
]
ignore = [
  "B905",   # zip() without strict=
  "ANN101", # Missing type annotation for `self` in method
]

[tool.ruff.mccabe]
max-complexity = 15

[tool.ruff.isort]
required-imports = [ "from __future__ import annotations" ]

[tool.codespell]
skip = "*.svg"
ignore-words-list = "ines,Ines"
