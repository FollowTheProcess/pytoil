{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Home","text":"<p>toil \"Long, strenuous or fatiguing labour\"</p> <ul> <li> <p>Source Code: https://github.com/FollowTheProcess/pytoil</p> </li> <li> <p>Documentation: https://FollowTheProcess.github.io/pytoil/</p> </li> </ul> <p></p>"},{"location":"index.html#what-is-it","title":"What is it?","text":"<p>pytoil is a small, helpful CLI to take the toil out of software development!</p> <p><code>pytoil</code> is a handy tool that helps you stay on top of all your projects, remote or local. It's primarily aimed at python developers but you could easily use it to manage any project!</p> <p>pytoil is:</p> <ul> <li>Easy to use \u2705</li> <li>Easy to configure \u2705</li> <li>Safe (it won't edit your repos at all) \u2705</li> <li>Snappy (it's asynchronous from the ground up and as much as possible is done concurrently, clone all your repos in seconds!) \ud83d\udca8</li> <li>Useful! (I hope \ud83d\ude03)</li> </ul> <p>Say goodbye to janky bash scripts \ud83d\udc4b\ud83c\udffb</p>"},{"location":"index.html#background","title":"Background","text":"<p>Like many developers I suspect, I quickly became bored of typing repeated commands to manage my projects, create virtual environments, install packages, fire off <code>cURL</code> snippets to check if I had a certain repo etc.</p> <p>So I wrote some shell functions to do some of this for me...</p> <p>And these shell functions grew and grew and grew.</p> <p>Until one day I saw that the file I kept these functions in was over 1000 lines of bash (a lot of <code>printf</code>'s so it wasn't all logic but still). And 1000 lines of bash is waaaay too much!</p> <p>And because I'd basically hacked it all together, it was very fragile. If a part of a function failed, it would just carry on and wreak havoc! I'd have to do <code>rm -rf all_my_projects</code>... I mean careful forensic investigation to fix it.</p> <p>So I decided to make a robust CLI with the proper error handling and testability of python, and here it is! \ud83c\udf89</p>"},{"location":"index.html#installation","title":"Installation","text":"<p>As pytoil is a CLI program, I'd recommend installing with pipx.</p> <p></p> <p>You can always fall back to pip</p> <p></p> <p>pytoil will install everything it needs in python to work. However, it's full feature set can only be accessed if you have the following external dependencies:</p> <ul> <li>git</li> <li>conda (if you work with conda environments)</li> <li>A directory-aware editor e.g. VSCode etc. (if you want to use pytoil to automatically open your projects for you)</li> <li>poetry (if you want to create poetry environments)</li> <li>flit (if you want to create flit environments)</li> </ul>"},{"location":"index.html#quickstart","title":"Quickstart","text":"<p><code>pytoil</code> is super easy to get started with.</p> <p>After you install pytoil, the first time you run it you'll get something like this.</p> <p></p> <p>If you say yes, pytoil will walk you through a few questions and fill out your config file with the values you enter. If you'd rather not do this interactively, just say no and it will instead put a default config file in the right place for you to edit later.</p> <p>Once you've configured it properly, you can do things like...</p>"},{"location":"index.html#see-your-local-and-remote-projects","title":"See your local and remote projects","text":""},{"location":"index.html#see-which-ones-you-have-on-github-but-not-on-your-computer","title":"See which ones you have on GitHub, but not on your computer","text":""},{"location":"index.html#easily-grab-a-project-regardless-of-where-it-is","title":"Easily grab a project, regardless of where it is","text":"<p>This project is available on your local machine...</p> <p></p> <p>This one is on GitHub...</p> <p></p>"},{"location":"index.html#create-a-new-project-and-virtual-environment-in-one-go","title":"Create a new project and virtual environment in one go","text":"<p>(And include custom packages, see the docs)</p>"},{"location":"index.html#and-even-do-this-from-a-cookiecutter-template","title":"And even do this from a cookiecutter template","text":"<p>And loads more!</p> <p>pytoil's CLI is designed such that if you don't specify any arguments, it won't do anything! just show you the <code>--help</code>. This is called being a 'well behaved' unix command line tool.</p> <p>This is true for any subcommand of pytoil so you won't accidentally break anything if you don't specify arguments \ud83c\udf89</p> <p>And if you get truly stuck, you can quickly open pytoil's documentation with:</p> <p></p> <p>Check out the docs for more \ud83d\udca5</p>"},{"location":"index.html#contributing","title":"Contributing","text":"<p><code>pytoil</code> is an open source project and, as such, welcomes contributions of all kinds \ud83d\ude03</p> <p>Your best bet is to check out the contributing guide in the docs!</p>"},{"location":"config.html","title":"Config","text":""},{"location":"config.html#required","title":"Required","text":"<p>There's really not much to configure, all pytoil needs you to specify is:</p> <ul> <li>What your GitHub username is (<code>username</code>)</li> <li>Your GitHub personal access token (<code>token</code>)</li> </ul> <p>If you don't know how to generate a GitHub token, check out the docs.</p> <p>Note</p> <p>If you don't specify <code>token</code> but have <code>GITHUB_TOKEN</code> set as environment variable, pytoil will use that instead </p>"},{"location":"config.html#optional","title":"Optional","text":"<p>There are also some optional configurations you can tweak:</p> Key Definition Default <code>projects_dir</code> Where you keep your projects <code>$HOME/Development</code> <code>editor</code> Name of the binary to use when opening projects. <code>$EDITOR</code> <code>conda_bin</code> The name of the conda binary (conda or mamba) <code>conda</code> <code>common_packages</code> List of packages you want pytoil to inject in every environment it creates (linters, formatters etc.) <code>None</code> <code>git</code> Whether you want pytoil to initialise and commit a git repo when it makes a fresh project True <p>These optional settings don't have to be set if you're happy using the default settings!</p> <p>Info</p> <p>Don't worry about giving pytoil your personal token. All we do with it is make HTTP GET and POST requests to the GitHub API using your token to authenticate the requests. This is essential to pytoil's functionality and it lets us:</p> <ul> <li>See your repos and get some basic info about them (name, date created etc.)</li> <li>Create forks of other people's projects when requested (e.g. when using checkout)</li> </ul> <p>In fact, the only permissions pytoil needs is repo and user access! </p>"},{"location":"config.html#the-config-file","title":"The Config File","text":"<p>After you install pytoil, the first time you run it you'll get something like this.</p> <pre><code>$ pytoil\n\nNo pytoil config file detected!\n? Interactively configure pytoil? [y/n]\n</code></pre> <p>If you say yes, pytoil will walk you through a few questions and fill out your config file with the values you enter. If you'd rather not do this interactively, just say no and it will instead put a default config file in the right place for you to edit later.</p> <p>Note</p> <p>This command will only write a config file if it doesn't find one already. If one already exists, running <code>pytoil config show</code> will show you the settings from that file. Remember, you can always quickly edit your pytoil config file using <code>pytoil config edit</code> \ud83d\udd25</p> <p>When you open the config file, it will look something like this:</p> <pre><code># ~/.pytoil.toml\n\n[pytoil]\ncommon_packages = []\nconda_bin = \"conda\"\neditor = \"code-insiders\"\ngit = true\nprojects_dir = \"/Users/tomfleet/Development\"\ntoken = \"Your github personal access token\"\nusername = \"Your github username\"\n</code></pre> <p>Warning</p> <p><code>projects_dir</code> must be the absolute path to where you keep your projects. So you'll need to explicitly state the entire path (as in the example above) starting from the root.</p> <p>You should now edit the config file to your liking. Your username and token are required for GitHub API access and will cause an error on most pytoil operations so these must be filled out. Everything else is optional </p> <p>So as an example, your filled out config file might look like this:</p> <pre><code># ~/.pytoil.toml\n\n[pytoil]\ncommon_packages = [\"black\", \"mypy\", \"isort\", \"flake8\"]\nconda_bin = \"mamba\"\neditor = \"code-insiders\"\ngit = true\nprojects_dir = \"/Users/tomfleet/Development\"\ntoken = \"ljbsxu9uqwd978\" # This isn't real\nusername = \"FollowTheProcess\"\n</code></pre> <p>Tip</p> <p>You can also interact with the pytoil config file via pytoil itself using the <code>pytoil config</code> command group.</p>"},{"location":"commands/bug.html","title":"bug","text":"<p>If you find a bug in pytoil, want to submit a feature request, or just have a question to ask, you can easily open up pytoil's issues page with <code>pytoil bug</code>.</p> <pre><code>$ pytoil bug\n\nOpening pytoil's issues in your browser...\n\n// Now you're at our issues page!\n</code></pre>"},{"location":"commands/checkout.html","title":"Checkout","text":"<p><code>checkout</code> (not to be confused with <code>git checkout</code>) allows to easily resume work on an ongoing development project.</p>"},{"location":"commands/checkout.html#help","title":"Help","text":"<pre><code>$ pytoil checkout --help\n\nUsage: pytoil checkout [OPTIONS] PROJECT\n\n  Checkout an existing development project.\n\n  The checkout command lets you easily resume work on an existing project,\n  whether that project is available locally in your configured projects\n  directory, or if it is on GitHub.\n\n  If pytoil finds your project locally, and you have specified an editor in\n  your config file it will open it for you. If not, it will just tell you it\n  already exists locally and where to find it.\n\n  If your project is on your GitHub, pytoil will clone it for you and then\n  open it (or tell you where it cloned it if you dont have an editor set up).\n\n  Finally, if checkout can't find a match after searching locally and on\n  GitHub, it will prompt you to use 'pytoil new' to create a new one.\n\n  If you pass the shorthand to someone elses repo e.g. 'someoneelse/repo'\n  pytoil will detect this and ask you whether you want to create a fork or\n  clone the original. Forking happens asynchronously so we give it a few\n  seconds, then check whether or not your fork exists yet. If it does, all is\n  well and we can clone it for you automatically. If not, (which is totally\n  normal), we'll let you know. In which case just give it a few seconds then a\n  'pytoil checkout repo' will bring it down as normal.\n\n  If you pick \"clone\" then it just clones the original for you.\n\n  You can also ask pytoil to automatically create a virtual environment on\n  checkout with the '--venv/-v' flag. This only happens for projects pulled\n  down from GitHub to avoid accidentally screwing up local projects.\n\n  If the '--venv/-v' flag is used, pytoil will look at your project to try and\n  detect which type of environment to create e.g. conda, flit, poetry,\n  standard python etc.\n\n  The '--venv/-v' flag will also attempt to detect if the project you're\n  checking out is a python package, in which case it will install it's\n  requirements into the created environment.\n\n  More info about this can be found in the documentation. Use `pytoil docs` to\n  go there.\n\n  Examples:\n\n  $ pytoil checkout my_project\n\n  $ pytoil checkout my_project --venv\n\n  $ pytoil checkout someoneelse/project\n\nOptions:\n  -v, --venv  Attempt to auto-create a virtual environment.\n  --help      Show this message and exit.\n</code></pre>"},{"location":"commands/checkout.html#local-project","title":"Local Project","text":"<p>If the project is available locally, <code>checkout</code> will simply open it for you using whatever editor you have configured pytoil to use</p> <pre><code>// Some project that's already local\n$ pytoil checkout my_local_project\n\nProject: 'my_local_project' found locally!\n\nOpening 'my_github_project' with &lt;editor&gt;...\n</code></pre>"},{"location":"commands/checkout.html#remote-project","title":"Remote Project","text":"<p>If pytoil can't find your project locally, but it is on your GitHub <code>checkout</code> will:</p> <ul> <li>Clone it to your projects directory</li> <li>Open it for you (if you configure an appropriate editor in config)</li> </ul> <pre><code>// Some project that's on GitHub\n$ pytoil checkout my_github_project\n\nProject: 'my_github_project' found on GitHub! Cloning...\n// You might see some git clone output here\n\nOpening 'my_github_project' with &lt;editor&gt;...\n</code></pre> <p>What's an appropriate editor?</p> <p>Initially pytoil only supported VSCode as that was what I was most familiar with. However since version 0.28.0, pytoil now supports specifying an editor using the <code>editor</code> key in the config file.</p> <p>However, there are a few caveats:</p> <ul> <li>The editor must be \"directory aware\" i.e. it must be able to open entire directories at once e.g. VSCode, Pycharm, Atom, Sublime etc.</li> <li>It must have a command line interface, the name of which you should use when setting the <code>editor</code> config key, e.g. <code>code</code> or <code>code-insiders</code> for VSCode</li> <li>The command to launch the editor at a certain filepath must be of the form <code>&lt;cmd&gt; &lt;path&gt;</code></li> </ul> <p>If your editor ticks all those boxes, you can use it with pytoil \ud83d\udc4d\ud83c\udffb</p>"},{"location":"commands/checkout.html#someone-elses-project","title":"Someone else's project","text":"<p>A common workflow in open source is to fork someone elses project and then work on your fork. With <code>pytoil</code> this can be done in the same command! If you provide the shorthand repo path to <code>pytoil checkout</code> e.g. <code>someoneelse/repo</code>, <code>pytoil</code> will:</p> <ul> <li>Ask you whether you want to fork it and clone your fork, or just clone the original</li> <li>If you pick fork it will fork the project to your GitHub, clone it for you and add the original repo as remote \"upstream\"</li> <li>If you pick clone it will simply clone the original repo for you e.g. if you're a collaborator and want to checkout a PR</li> </ul> <p>Basically all the chores you would have to do to work on a open source project! </p> <pre><code>// Someone else's project\n$ pytoil checkout someone/their_github_project\n\n'someone/their_github_project' belongs to 'someone'\n? Fork project or clone the original?\n&gt; fork\n&gt; clone\n\nDo awesome stuff!\n</code></pre> <p>Note</p> <p>Forking happens asynchronously on GitHub's end and there is no guarantee on a timeline (although GitHub is very well engineered and this normally happens pretty much straight away) so we make a best effort here to wait for GitHub's internal state to synchronise and check if the fork was a success. However, this can sometimes time out, in which case pytoil will let you know and handle this gracefully </p> <p>If this happens to you, all you need to do is wait a few seconds and then try <code>pytoil checkout &lt;project&gt;</code> again.</p>"},{"location":"commands/checkout.html#automatically-create-a-virtual-environment","title":"Automatically Create a Virtual Environment","text":"<p>If you pass the <code>--venv</code> option, <code>checkout</code> will also:</p> <ul> <li>Try to detect what environment would work best for the project (conda, venv, flit, poetry)</li> <li>Auto create this virtual environment</li> <li>Look for requirements files that specify dependencies such as <code>environment.yml</code> for conda, <code>setup.cfg</code> or <code>setup.py</code> for normal python packages etc.</li> </ul> <pre><code>// Some project that's on GitHub\n$ pytoil checkout my_github_project --venv\n\nProject: 'my_github_project' found on GitHub! Cloning...\n// You might see some git clone output here\n\nAuto-creating correct virtual environment\n// Here you might see some conda or venv stuff\n\nOpening 'my_github_project' with &lt;editor&gt;...\n</code></pre> <p>Note</p> <p>pytoil looks for certain files in your project (like <code>setup.py</code>, <code>setup.cfg</code>, <code>pyproject.toml</code>, <code>environment.yml</code> etc.) and that's how it decides which environment to create. If it isn't totally sure what environment to create, it will just skip this step and let you know!</p>"},{"location":"commands/checkout.html#how-pytoil-knows-what-to-install","title":"How pytoil Knows What to Install","text":"<p>The <code>--venv</code> implementation is quite complex (and it took me a while to get it right!) but effectively, <code>pytoil</code> will look at the contents of your cloned project to decide what to do, create the matching virtual environment, then delegate to the appropriate tool to install dependencies.</p> <p>A summary of what <code>pytoil</code> does when it finds certain files is found below, the search priority is in the same order as presented and <code>pytoil</code> will match on the first found condition to create the environment:</p>"},{"location":"commands/checkout.html#environmentyml","title":"<code>environment.yml</code>","text":"<p>Must mean it's a conda project, delegate to conda using <code>conda env create --file environment.yml</code></p>"},{"location":"commands/checkout.html#requirementstxt-or-requirements-devtxt","title":"<code>requirements.txt</code> or <code>requirements-dev.txt</code>","text":"<p>Python script or non-package project e.g. django web app, delegate to pip using <code>pip install -r &lt;file&gt;</code></p> <p>Prefers <code>requirements-dev.txt</code> if present as it will have everything needed to work on the project, falls back to <code>requirements.txt</code> if not.</p>"},{"location":"commands/checkout.html#setupcfg-or-setuppy","title":"<code>setup.cfg</code> or <code>setup.py</code>","text":"<p>Python package, again delegate to pip using <code>pip install -e .[dev]</code></p> <p>Defaults to using the [dev] target for convention and to ensure the entire dev environment is set up, if this isn't present pip automatically falls back to <code>pip install -e .</code></p>"},{"location":"commands/checkout.html#pyprojecttoml-specifying-poetry-as-a-build-tool","title":"<code>pyproject.toml</code> specifying poetry as a build tool","text":"<p>Python package managed with poetry, here we basically delegate everything to poetry as it handles both the virtual environment and installation of dependencies.</p> <p><code>pytoil</code> is effectively doing <code>poetry install</code> as you might yourself.</p>"},{"location":"commands/checkout.html#pyprojecttoml-specifying-flit-as-a-build-tool","title":"<code>pyproject.toml</code> specifying flit as a build tool","text":"<p>Python package managed with flit, here we create a virtual environment the normal python way, then delegate to flit to install dependencies.</p> <p>Something like <code>flit install</code> called from the directory of the project. (We actually do a bit more than this to make sure it only targets your local environment for that project, but that's the gist of it!)</p>"},{"location":"commands/checkout.html#else","title":"Else","text":"<p>If we get here, <code>pytoil</code> gives up and will tell you something along the lines of \"could not detect correct virtual environment. skipping\". Your project will still be checked out, but you'll have to do the virtual environment stuff yourself I'm afraid!  But we gave it our best shot!</p> <p>Note</p> <p>Although we've tried to make the implementation of this as robust as possible, it's quite complex and there's bound to be edge cases lurking here somewhere. If you hit any, please file an issue and maybe even try and fix it yourself and throw us a PR </p> <p>Remember if you need more custom behaviour than this, you can just plain <code>pytoil checkout</code> without the <code>--venv</code> and <code>pytoil</code> won't try and be clever, it will just straight up clone the project for you to do whatever you want with!</p>"},{"location":"commands/config.html","title":"Config","text":"<p>The <code>config</code> subcommand is pytoil's programmatic access to it's own configuration file! Here you can get, show and get help about the configuration.</p>"},{"location":"commands/config.html#help","title":"Help","text":"<pre><code>$ pytoil config --help\n\nUsage: pytoil config [OPTIONS] COMMAND [ARGS]...\n\n  Interact with pytoil's configuration.\n\n  The config command group allows you to get, show and explain pytoil's\n  configuration.\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  edit     Open pytoil's config file in $EDITOR.\n  explain  Print a list and description of pytoil config values.\n  get      Get the currently set value for a config key.\n  show     Show pytoil's config.\n</code></pre>"},{"location":"commands/config.html#get","title":"Get","text":"<p><code>get</code> does what it says. It gets a valid config key-value pair from your file and shows it to you. Simple!</p> <pre><code>$ pytoil config get editor\n\neditor: code-insiders\n</code></pre>"},{"location":"commands/config.html#show","title":"Show","text":"<p><code>show</code> is just a handy way of seeing what the current config is without having to go to the config file!</p> <pre><code>$ pytoil config show\n\n               Key   Value\n \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n     projects_dir:   /Users/tomfleet/Development\n            token:   skjdbakshbv82v27676cv\n         username:   FollowTheProcess\n           editor:   code-insiders\n        conda_bin:   mamba\n  common_packages:   ['black', 'mypy', 'isort', 'flake8']\n              git:   True\n</code></pre>"},{"location":"commands/config.html#edit","title":"Edit","text":"<p><code>edit</code> simply opens up the pytoil config file in your $EDITOR so you can make any changes you like!</p> <pre><code>$pytoil config edit\n\nOpening ~/.pytoil.toml in your $EDITOR\n</code></pre>"},{"location":"commands/config.html#explain","title":"Explain","text":"<p>The command <code>pytoil config explain</code> outputs a (hopefully) helpful description of the pytoil configuration schema.</p>"},{"location":"commands/find.html","title":"Find","text":"<p>The <code>find</code> command lets you easily search for one of your projects (even if you can't exactly remember it's name \ud83e\udd14).</p>"},{"location":"commands/find.html#help","title":"Help","text":"<pre><code>$ pytoil find --help\n\nUsage: pytoil find [OPTIONS] PROJECT\n\n  Quickly locate a project.\n\n  The find command provides a fuzzy search for finding a project when you\n  don't know where it is (local or on GitHub).\n\n  It will perform a fuzzy search through all your local and remote projects,\n  bring back the best matches and show you where they are.\n\n  Useful if you have a lot of projects and you can't quite remember what the\n  one you want is called!\n\n  The \"-l/--limit\" flag can be used to alter the number of returned search\n  results, but bare in mind that matches with sufficient match score are\n  returned anyway so the results flag only limits the maximum number of\n  results shown.\n\n  Examples:\n\n  $ pytoil find my\n\n  $ pytoil find proj --limit 5\n\nOptions:\n  -l, --limit INTEGER  Limit results to maximum number.  [default: 5]\n  --help               Show this message and exit.\n</code></pre>"},{"location":"commands/find.html#searching-for-projects","title":"Searching for Projects","text":"<pre><code>// I swear it was called python... something\n$ pytoil find python\n\n\n  Project           Similarity   Where\n \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n  py                90           Remote\n  python-launcher   90           Remote\n</code></pre> <p>What pytoil does here is it takes the argument you give it, fetches all your projects and does a fuzzy text match against all of them, wittles down the best matches and shows them to you (along with whether they are available locally or on GitHub).</p> <p>Isn't that useful! \ud83c\udf89</p> <p>Info</p> <p>Under the hood, pytoil uses the excellent thefuzz library to do this, which implements the Levenshtein distance algorithm to find the best matches \ud83d\ude80</p>"},{"location":"commands/find.html#404-project-not-found","title":"404 - Project Not Found","text":"<p>If <code>find</code> can't find a match in any of your projects, you'll get a helpful warning...</p> <pre><code>// Something that won't match\n$ pytoil find dingledangledongle\n\n\u26a0 No matches found!\n</code></pre>"},{"location":"commands/gh.html","title":"gh","text":"<p>Sometimes you just want to quickly go to the GitHub page for your project. Enter the incredibly simple <code>gh</code> command!</p> <pre><code>$ pytoil gh my_project\n\nOpening 'my_project' in your browser...\n\n// Now you're at the GitHub page for the project!\n</code></pre>"},{"location":"commands/gh.html#prs-and-issues","title":"PR's and Issues","text":"<p><code>gh</code> provides two flags to immediately open the pull requests or issues section of the specified repo. Knock yourself out!</p> <pre><code>$ pytoil gh my_project --help\n\nUsage: pytoil gh [OPTIONS] PROJECT\n\n  Open one of your projects on GitHub.\n\n  Given a project name (must exist on GitHub and be owned by you), 'gh' will\n  open your browser and navigate to the project on GitHub.\n\n  You can also use the \"--issues\" or \"--prs\" flags to immediately open up the\n  repo's issues or pull requests page.\n\n  Examples:\n\n  $ pytoil gh my_project\n\n  $ pytoil gh my_project --issues\n\n  $ pytoil gh my_project --prs\n\nOptions:\n  -i, --issues  Go to the issues page.\n  -p, --prs     Go to the pull requests page.\n  --help        Show this message and exit.\n</code></pre>"},{"location":"commands/info.html","title":"Info","text":"<p>Another easy one! <code>info</code> simply shows you some summary information about whatever project you tell it to.</p> <pre><code>// Let's get some info about pytoil\n$ pytoil info pytoil\n\nInfo for pytoil:\n\n           Key   Value\n \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n         Name:   pytoil\n  Description:   CLI to automate the development workflow \ud83e\udd16\n      Created:   11 months ago\n      Updated:   7 days ago\n         Size:   6.4 MB\n      License:   Apache License 2.0\n       Remote:   True\n        Local:   True\n</code></pre> <p>What happens here is pytoil uses the GitHub personal access token we talked about in config and hits the GitHub API to find out some basic information about the repo you pass to it </p> <p>pytoil will always prefer this way of doing it as we can get things like license information and description which is a bit more helpful to show. If however, the project you're asking for information about does not exist on GitHub yet, you'll still get some info back!</p> <pre><code>// Some project that's not on GitHub yet\n$ pytoil info my_local_project\n\nInfo for testy:\n\n       Key   Value\n \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n     Name:   testy\n  Created:   23 seconds ago\n  Updated:   23 seconds ago\n    Local:   True\n   Remote:   False\n</code></pre> <p>Note</p> <p>pytoil grabs this data from your operating system by using the <code>Path.stat()</code> method from pathlib </p>"},{"location":"commands/keep.html","title":"Keep","text":"<p><code>keep</code> is effectively the opposite of remove, it deletes everything except the projects you specify from your local projects directory.</p> <p>It is useful when you want to declutter your projects directory but don't want to pass lots of arguments to remove, with <code>keep</code> you can tell pytoil the projects you want to keep, and it will remove everything else for you!</p>"},{"location":"commands/keep.html#help","title":"Help","text":"<pre><code>$ pytoil keep --help\n\nUsage: pytoil keep [OPTIONS] [PROJECTS]...\n\n  Remove all but the specified projects.\n\n  The keep command lets you delete all projects from your local projects\n  directory whilst keeping the specified ones untouched.\n\n  It is effectively the inverse of `pytoil remove`.\n\n  As with most programmatic deleting, the directories are deleted instantly\n  and not sent to trash. As such, pytoil will prompt you for confirmation\n  before doing anything.\n\n  The \"--force/-f\" flag can be used to force deletion without the confirmation\n  prompt. Use with caution!\n\n  Examples:\n\n  $ pytoil keep project1 project2 project3\n\n  $ pytoil keep project1 project2 project3 --force\n\nOptions:\n  -f, --force  Force delete without confirmation.\n  --help       Show this message and exit.\n</code></pre>"},{"location":"commands/keep.html#usage","title":"Usage","text":"<p>To use <code>keep</code> just pass the projects you want to keep as arguments.</p> <pre><code>$ pytoil keep project other_project another_project\n\n# This will delete remove1, remove2, remove3 from your local filesystem. Are you sure? [y/N]:$ y\n\nDeleted: remove1.\nDeleted: remove2.\nDeleted: remove3.\n</code></pre> <p>And if you say no...</p> <pre><code>$ pytoil keep project other_project another_project\n\n# This will delete remove1, remove2, remove3 from your local filesystem. Are you sure? [y/N]:$ n\n\nAborted!\n</code></pre>"},{"location":"commands/keep.html#force-deletion","title":"Force Deletion","text":"<p>If you're really sure what you're doing, you can get around the confirmation prompt by using the <code>--force/-f</code> flag.</p> <pre><code>$ pytoil keep project1 project2 --force\n\nRemoved: remove1.\nRemoved: remove2.\nRemoved: remove3.\n</code></pre>"},{"location":"commands/new.html","title":"New","text":"<p><code>new</code> will make you a new project locally. You have the option to create a new virtual environment with it and to create the project from a cookiecutter template \ud83c\udf6a</p>"},{"location":"commands/new.html#help","title":"Help","text":"<pre><code>$ pytoil new --help\n\nUsage: pytoil new [OPTIONS] PROJECT [PACKAGES]...\n\n  Create a new development project.\n\n  Bare usage will simply create an empty folder in your configured projects\n  directory.\n\n  You can also create a project from a cookiecutter or copier template by\n  passing a valid url to the '--cookie/-c' or '--copier/-C' flags.\n\n  If you just want a very simple, language-specific starting template, use the\n  '--starter/-s' option.\n\n  By default, pytoil will initialise a local git repo in the folder and commit\n  it, following the style of modern language build tools such as rust's cargo.\n  You can disable this behaviour by setting 'git' to false in pytoil's config\n  file or by passing the '--no-git/-n' flag here.\n\n  If you want pytoil to create a new virtual environment for your project, you\n  can use the '--venv/-v' flag. Standard python and conda virtual environments\n  are supported.\n\n  If the '--venv/-v' flag is used, you may also pass a list of python packages\n  to install into the created virtual environment. These will be delegated to\n  the appropriate tool (pip or conda) depending on what environment was\n  created. If the environment is conda, the packages will be passed at\n  environment creation time meaning they will have their dependencies resolved\n  together. Normal python environments will first be created and then have\n  specified packages installed.\n\n  If 'common_packages' is specified in pytoil's config file, these will\n  automatically be included in the environment.\n\n  To specify versions of packages via the command line, you must enclose them\n  in double quotes e.g. \"flask&gt;=1.0.0\" not flask&gt;=1.0.0 otherwise this will be\n  interpreted by the shell as a command redirection.\n\n  Examples:\n\n  $ pytoil new my_project\n\n  $ pytoil new my_project --cookie https://github.com/some/cookie.git\n\n  $ pytoil new my_project --venv conda\n\n  $ pytoil new my_project -c https://github.com/some/cookie.git -v conda --no-\n  git\n\n  $ pytoil new my_project -v venv requests \"flask&gt;=1.0.0\"\n\n  $ pytoil new my_project --starter python\n\nOptions:\n  -c, --cookie TEXT               URL to a cookiecutter template from which to\n                                  build the project.\n  -C, --copier TEXT               URL to a copier template from which to build\n                                  the project.\n  -s, --starter [python|go|rust]  Use a language-specific starter template.\n  -v, --venv [venv|conda]         Which type of virtual environment to create.\n  -n, --no-git                    Don't do any git stuff.\n  --help                          Show this message and exit.\n</code></pre>"},{"location":"commands/new.html#no-options","title":"No Options","text":"<p>If you don't give any options, the default behaviour is to just make a new empty folder with no virtual environment for you to do whatever you want with!</p> <p>In this sense, you don't have to be a python developer to use pytoil!</p> <pre><code>$ pytoil new my_new_project\n\nCreating new project: 'my_new_project'\n// Does some stuff...\n</code></pre>"},{"location":"commands/new.html#new-git-repo","title":"New Git Repo","text":"<p>By default, pytoil will also create a local git repository in this folder for you. You can disable this behaviour by changing the value for <code>git</code> in your config file, or on a per use basis by using the <code>--no-git</code> flag.</p> <p>You will need <code>git</code> installed to be able to use this feature.</p> <pre><code>$ pytoil new my_new_project --no-git\n\nCreating new project: 'my_new_project'\n// Does some stuff...but not git\n</code></pre> <p>Note</p> <p>A lot of modern language tools (e.g. rust's <code>cargo</code>) initialise a git repo by default and I liked the idea so here it is </p>"},{"location":"commands/new.html#include-virtual-environment","title":"Include Virtual Environment","text":"<p>If you are a python developer though, chances are you'll want to create a virtual environment with your project. pytoil supports both venv and conda environments, although for the latter you'll have to have the conda package manager already installed on your system. I personally recommend miniconda as you get the package manager but none of the bundled packages (which can be quite large!).</p> <p>For standard python virtual environments, pytoil uses the standard library <code>venv</code> module so you don't need to install anything external.</p> <p>If you want to use conda environments though, you'll need to have a <code>conda</code> package manager installed and available on $PATH.</p> <p>Info</p> <p>If you don't know what conda is: as a general rule, you'll want to use venv on most python projects (particularly packages i.e. things that can be pip installed). If you do a lot of work with data (think pandas, numpy, scikit-learn) you'll probably want to use conda as a lot of python data tools include native C libraries which require compiling, and conda makes this happen seamlessly </p> <p>Pytoil has been tested and supports the following conda distributions:</p> <ul> <li>Anaconda</li> <li>Miniconda</li> <li>Miniforge</li> <li>Mambaforge</li> </ul> <p>All you have to do is specify which virtual environment to create, using the <code>--venv/-v</code> option flag. You can choose from <code>venv</code> or <code>conda</code>. The default is <code>None</code>.</p> <pre><code>$ pytoil new my_new_project --venv venv\n\nCreating new project: 'my_new_project'\nCreating virtual environment for: 'my_new_project'\n</code></pre> <p>Or with conda...</p> <pre><code>$ pytoil new my_new_project --venv conda\n\nCreating new project: 'my_new_project'\nCreating conda environment for: 'my_new_project'\n// Conda environments typically take a bit longer to make as it has to do a bit more work!\n</code></pre>"},{"location":"commands/new.html#install-packages-at-creation","title":"Install Packages at Creation","text":"<p>A blank virtual environment isn't really much use yet! <code>pytoil</code> lets you inject packages at environment creation time! All you have to do is pass packages you want to install into the new environment as additional command line arguments and pytoil will figure this all out for you.</p> <pre><code>$ pytoil new my_new_project --venv conda pandas numpy scikit-learn\n\nCreating new project: 'my_new_project'\nCreating conda environment for: 'my_new_project'\nIncluding packages: pandas, numpy, scikit-learn\n// Conda environments typically take a bit longer to make as it has to do a bit more work!\n</code></pre> <p>Note</p> <p>This is also where the <code>common_packages</code> setting from the config file comes in! If you specify packages here, these will automatically get injected into every environment pytoil creates, whether its a python virtual environment or a conda environment. This is particularly useful for development dependencies like linters and formatters etc.</p>"},{"location":"commands/new.html#build-a-project-from-a-cookiecuttercopier-template","title":"Build a project from a Cookiecutter/Copier Template","text":"<p>If you don't know what cookiecutter or copier are, go and check them out! Essentially, they are templating engines for development projects and, after asking you a few questions, can dynamically insert and modify text inside your project, set up directory structure and all sorts of cool automation stuff!</p> <p>It means that if you find a template you like (or make your own) you can use it as the base for development projects without having to create so much boilerplate at the beginning, they're great </p> <p>Because I love these projects so much, I built pytoil to support them easily. You can create a new project from a cookiecutter or copier template by using the <code>--cookie/-c</code> or <code>--copier/-C</code> flag like this:</p> <pre><code>// Just pass a url to a cookiecutter template\n$ pytoil new my_new_project --cookie https://github.com/some/cookie.git\n\nCreating new project: 'my_new_project' from cookiecutter: 'https://github.com/some/cookie.git'\n</code></pre>"},{"location":"commands/new.html#create-from-a-starter","title":"Create from a starter","text":"<p>pytoil also comes with a few basic starter templates for some common languages. How it creates these templates is specific to the language, but you can use them like this....</p> <p>Here's a python one:</p> <pre><code>// Just pass a valid starter\n$ pytoil new my_new_python_project --starter python\n\nCreating new project: 'my_new_python_project' from starter: 'python'\n</code></pre> <p>And with go:</p> <pre><code>// Just pass a valid starter\n$ pytoil new my_new_go_project --starter go\n\nCreating new project: 'my_new_go_project' from starter: 'go'\n</code></pre> <p>Note</p> <p>Currently pytoil supports python, go and rust starter templates. The starters are super easy to implement though so if you want more languages supported, maybe throw us a PR </p> <p>The table below shows what happens under the hood when a starter is given to <code>pytoil new</code>:</p> Starter Implementation <code>python</code> Creates everything internally using pathlib <code>go</code> Creates the root directory and main.go internally. Then calls <code>go mod init</code> <code>rust</code> Creates the root directory internally. Then calls <code>cargo init</code>"},{"location":"commands/new.html#all-in-one-go","title":"All in One Go","text":"<p>Because pytoil uses [async-click] for it's CLI, the arguments and options to CLI commands are all resolved really intelligently so you can specify all of them in one go if you like to get complex behaviour!</p> <pre><code>$ pytoil new my_new_project --cookie https://github.com/some/cookie.git --venv venv --no-git requests \"flask&gt;=1.0.0\" sqlalchemy\n\n// Many things will now happen!\n</code></pre> <p>In this snippet we've:</p> <ul> <li>Created a new project in the correct folder called 'my_new_project'</li> <li>Built this project from a cookiecutter template hosted on GitHub</li> <li>Created a fresh python virtual environment for the project</li> <li>Told pytoil not to initialise an empty git repo (it actually doesn't do this on cookiecutter projects anyway but you get the point)</li> <li>Passed a list of additional packages to install into the new environment (along with any we've specified in the config file)</li> </ul> <p>That's better than doing all this yourself isn't it! </p>"},{"location":"commands/pull.html","title":"Pull","text":"<p><code>pull</code> does exactly what it sounds like, it provides a nice easy way to pull down multiple projects at once and saves you having to type <code>git clone</code> like a million times </p> <p>Any projects you already have locally will be completely skipped by <code>pull</code> so it's impossible to overwrite any local changes to projects </p>"},{"location":"commands/pull.html#help","title":"Help","text":"<pre><code>$ pytoil pull --help\n\nUsage: pytoil pull [OPTIONS] [PROJECTS]...\n\n  Pull down your remote projects.\n\n  The pull command provides easy methods for pulling down remote projects.\n\n  It is effectively a nice wrapper around git clone but you don't have to\n  worry about urls or what your cwd is, pull will grab your remote projects by\n  name and clone them to your configured projects directory.\n\n  You can also use pull to batch clone multiple repos, even all of them (\"--\n  all/-a\") if you're into that sorta thing.\n\n  If more than 1 repo is passed (or if \"--all/-a\" is used) pytoil will pull\n  the repos concurrently, speeding up the process.\n\n  Any remote project that already exists locally will be skipped and none of\n  your local projects are changed in any way. pytoil will only pull down those\n  projects that don't already exist locally.\n\n  It's very possible to accidentally clone a lot of repos when using pull so\n  you will be prompted for confirmation before pytoil does anything.\n\n  The \"--force/-f\" flag can be used to override this confirmation prompt if\n  desired.\n\n  Examples:\n\n  $ pytoil pull project1 project2 project3\n\n  $ pytoil pull project1 project2 project3 --force\n\n  $ pytoil pull --all\n\n  $ pytoil pull --all --force\n\nOptions:\n  -f, --force  Force pull without confirmation.\n  -a, --all    Pull down all your projects.\n  --help       Show this message and exit.\n</code></pre>"},{"location":"commands/pull.html#all","title":"All","text":"<p>When you run <code>pytoil pull --all</code> pytoil will scan your projects directory and your GitHub repos to calculate what's missing locally and then go and grab the required repos concurrently so it's as fast as possible (useful if you have a lot of repos!) </p> <pre><code>$ pytoil pull --all\n\n# This will clone 7 repos. Are you sure you wish to proceed? [y/N]:$ y\n\nCloned 'repo1'...\n\nCloned 'repo2'...\n\netc...\n</code></pre> <p>Warning</p> <p>Even though this is done concurrently, if you have lots of GitHub repos (&gt; 50 or so) this could still take a few seconds, you might be better off selecting specific repos to pull by using <code>pytoil pull [project(s)]</code>. More on that down here </p> <p>However, it will prompt you telling you exactly how many repos it is going to clone and ask you to confirm! This confirmation can be disabled by using the <code>--force/-f</code> flag.</p> <pre><code>$ pytoil pull --all\n\n# This will clone 1375 repos. Are you sure you wish to proceed? [y/N]:$ n\n\n// Lol... nope!\n\nAborted!\n</code></pre>"},{"location":"commands/pull.html#some","title":"Some","text":"<p>If you have a lot of repos or you only want a few of them, <code>pytoil pull</code> accepts a space separated list of projects as arguments.</p> <p>Doing it this way, it will again check if you already have any of these locally (and skip them if you do) and finally do the cloning. Like so:</p> <pre><code>$ pytoil pull repo1 repo2 repo3 cloned1\n\n// In this snippet, our user already has 'cloned1' locally so it's skipped\n\n# This will clone 3 repos. Are you sure you wish to proceed? [y/N]:$ y\n\nCloning 'repo1'...\n\nCloning 'repo2'...\n\netc...\n</code></pre> <p>And just like <code>--all</code> you can abort the whole operation by entering <code>n</code> when prompted.</p> <pre><code>$ pytoil pull repo1 repo2 repo3 cloned1\n\n// In this snippet, our user already has 'cloned1' locally so it's skipped\n\n# This will clone 3 repos. Are you sure you wish to proceed? [y/N]:$ n\n\nAborted!\n</code></pre> <p>Note</p> <p>If you pass more than 1 repo as an argument, it will also be cloned concurrently </p>"},{"location":"commands/remove.html","title":"Remove","text":"<p>This one is easy! <code>remove</code> does exactly what it says. It will recursively delete an entire project from your local projects directory. Since this is quite a destructive action, pytoil will prompt you to confirm before it does anything. If you say no, the entire process will be aborted and your project will be left alone!</p> <p>Warning</p> <p>The deletion of a project like this is irreversible. It does not send the folder to Trash, it simply erases it from all existence in the universe, so make sure you know what you're doing before saying yes! </p> <p>Don't Panic!</p> <p>Don't worry though, <code>remove</code> DOES NOT go near anything on your GitHub, only your local directories are affected by <code>remove</code>. pytoil only makes HTTP GET and POST requests to the GitHub API so you couldn't even delete a repo if you wanted to, in fact you can't make any changes to any GitHub repo with pytoil whatsoever so you're completely safe! </p>"},{"location":"commands/remove.html#help","title":"Help","text":"<pre><code>$ pytoil remove --help\n\nUsage: pytoil remove [OPTIONS] [PROJECTS]...\n\n  Remove projects from your local filesystem.\n\n  The remove command provides an easy interface for decluttering your local\n  projects directory.\n\n  You can selectively remove any number of projects by passing them as\n  arguments or nuke the whole lot with \"--all/-a\" if you want.\n\n  As with most programmatic deleting, the directories are deleted instantly\n  and not sent to trash. As such, pytoil will prompt you for confirmation\n  before doing anything.\n\n  The \"--force/-f\" flag can be used to force deletion without the confirmation\n  prompt. Use with caution!\n\n  Examples:\n\n  $ pytoil remove project1 project2 project3\n\n  $ pytoil remove project1 project2 project3 --force\n\n  $ pytoil remove --all\n\n  $ pytoil remove --all --force\n\nOptions:\n  -f, --force  Force delete without confirmation.\n  -a, --all    Delete all of your local projects.\n  --help       Show this message and exit.\n</code></pre>"},{"location":"commands/remove.html#remove-individual-projects","title":"Remove Individual Projects","text":"<p>If you want to remove one or more specific projects, just pass them to <code>remove</code> as arguments.</p> <pre><code>$ pytoil remove my_project my_other_project this_one_too\n\n# This will remove my_project, my_other_project, this_one_too from your local filesystem. Are you sure? [y/N]:$ y\n\nRemoved: 'my_project'.\nRemoved: 'my_other_project'.\nRemoved: 'this_one_too'\n</code></pre> <p>And if you say no...</p> <pre><code>$ pytoil remove my_project my_other_project this_one_too\n\n# This will remove my_project, my_other_project, this_one_too from your local filesystem. Are you sure? [y/N]:$ n\n\nAborted!\n</code></pre>"},{"location":"commands/remove.html#nuke-your-projects-directory","title":"Nuke your Projects Directory","text":"<p>And if you've completely given up and decided you don't want to be a developer anymore (we've all been there), you can erase all your local projects:</p> <pre><code>$ pytoil remove --all\n\n# This will remove ALL your projects. Are you okay? [y/N]:$ y\n\nRemoved: 'remove1'.\nRemoved: 'remove2'.\nRemoved: 'remove3'.\n</code></pre> <p>Note</p> <p>Because pytoil is written from the ground up to be asynchronous, all the removing happens concurrently in the asyncio event loop so it should be nice and snappy even for lots of very large projects! \ud83d\ude80</p>"},{"location":"commands/remove.html#force-deletion","title":"Force Deletion","text":"<p>If you're really sure what you're doing, you can get around the confirmation prompt by using the <code>--force/-f</code> flag.</p> <pre><code>$ pytoil remove project1 project2 --force\n\nRemoved: 'remove1'.\nRemoved: 'remove2'.\nRemoved: 'remove3'.\n</code></pre>"},{"location":"commands/show.html","title":"Show","text":"<p>We've seen a hint at some pytoil commands but lets dive in properly.</p> <p>Let's look at how you can use pytoil to help you </p> <p>The first subcommand we will look at is <code>pytoil show</code>.</p> <p><code>show</code> does what it says on the tin and provides a nice way of showing your local and remote projects.</p> <p>Note</p> <p><code>show</code> always shows the projects in alphabetical order </p> <p>Let's start with the help...</p>"},{"location":"commands/show.html#help","title":"Help","text":"<pre><code>$ pytoil show --help\n\nUsage: pytoil show [OPTIONS] COMMAND [ARGS]...\n\n  View your local/remote projects.\n\n  The show command provides an easy way of listing of the projects you have\n  locally in your configured development directory and/or of those you have on\n  GitHub (known in pytoil-land as 'remote' projects).\n\n  Local projects will be the names of subdirectories in your configured\n  projects directory.\n\n  The remote projects listed here will be those owned by you on GitHub.\n\n  The \"--limit/-l\" flag can be used if you only want to see a certain number\n  of results.\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  diff    Show the difference in local/remote projects.\n  forks   Show your forked projects.\n  local   Show your local projects.\n  remote  Show your remote projects.\n</code></pre> <p>Tip</p> <p>Remember, each subcommand has its own help you can check out too. e.g. <code>pytoil show local --help</code> </p>"},{"location":"commands/show.html#local","title":"Local","text":"<p><code>local</code> shows all the projects you already have in your configured projects directory (see config for how to set this!). If you don't have any local projects yet, pytoil will let you know.</p> <pre><code>$ pytoil show local\nLocal Projects\n\nShowing 3 out of 3 local projects\n\n  Name              Created          Modified\n \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n  project 1         13 days ago      9 days ago\n  project 2         a day ago        a minute ago\n  project 3         a month ago      a month ago\n</code></pre>"},{"location":"commands/show.html#remote","title":"Remote","text":"<p><code>remote</code> shows all the projects on your GitHub (you may or may not have some of these locally too). If you don't have any remote projects yet, pytoil will let you know.</p> <pre><code>$ pytoil show remote\nRemote Projects\n\nShowing 5 out of 31 remote projects\n\n  Name                  Size       Created                Modified\n \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n  advent_of_code_2020   46.1 kB    12 days ago            9 days ago\n  advent_of_code_2021   154.6 kB   a month ago            29 days ago\n  aircraft_crashes      2.1 MB     1 year, 15 days ago    11 months ago\n  cookie_pypackage      753.7 kB   1 year, 6 months ago   a month ago\n  cv                    148.5 kB   2 months ago           7 days ago\n</code></pre>"},{"location":"commands/show.html#diff","title":"Diff","text":"<p><code>diff</code> shows all the projects you have on GitHub, but don't yet exist locally. If your local projects folder has all your GitHub projects in it, pytoil will let you know this too.</p> <pre><code>$ pytoil show diff\nDiff: Remote - Local\n\nShowing 5 out of 26 projects\n\n  Name                  Size       Created                Modified\n \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n  advent_of_code_2021   154.6 kB   a month ago            29 days ago\n  aircraft_crashes      2.1 MB     1 year, 15 days ago    11 months ago\n  cookie_pypackage      753.7 kB   1 year, 6 months ago   a month ago\n  cv                    148.5 kB   2 months ago           7 days ago\n  eu_energy_analysis    1.9 MB     1 year, 1 month ago    1 year, 25 days ago\n</code></pre>"},{"location":"commands/show.html#forks","title":"Forks","text":"<p>You can also see all your forked repos and whether or not they are available locally!</p> <pre><code>$ pytoil show forks\nForked Projects\n\nShowing 2 out of 2 forked projects\n\n  Name              Size       Forked         Modified       Parent\n \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n  nox               5.2 MB     6 months ago   10 days ago    theacodes/nox\n  python-launcher   843.8 kB   2 months ago   2 months ago   brettcannon/python-launcher\n</code></pre>"},{"location":"contributing/code_of_conduct.html","title":"Contributor Covenant Code of Conduct","text":""},{"location":"contributing/code_of_conduct.html#our-pledge","title":"Our Pledge","text":"<p>In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socioeconomic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p>"},{"location":"contributing/code_of_conduct.html#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to creating a positive environment include:</p> <ul> <li>Using welcoming and inclusive language</li> <li>Being respectful of differing viewpoints and experiences</li> <li>Gracefully accepting constructive criticism</li> <li>Focusing on what is best for the community</li> <li>Showing empathy towards other community members</li> </ul> <p>Examples of unacceptable behavior by participants include:</p> <ul> <li>The use of sexualized language or imagery and unwelcome sexual attention or  advances</li> <li>Trolling, insulting/derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or electronic  address, without explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a  professional setting</li> </ul>"},{"location":"contributing/code_of_conduct.html#our-responsibilities","title":"Our Responsibilities","text":"<p>Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.</p> <p>Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.</p>"},{"location":"contributing/code_of_conduct.html#scope","title":"Scope","text":"<p>This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.</p>"},{"location":"contributing/code_of_conduct.html#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.</p> <p>Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.</p>"},{"location":"contributing/code_of_conduct.html#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html</p> <p>For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq</p>"},{"location":"contributing/contributing.html","title":"Contributing to pytoil","text":"<p>I've tried to structure pytoil to make it nice and easy for people to contribute. Here's how to go about doing it! </p> <p>Note</p> <p>All contributors must follow the Code of Conduct</p>"},{"location":"contributing/contributing.html#developing","title":"Developing","text":"<p>If you want to fix a bug, improve the docs, add tests, add a feature or any other type of direct contribution to pytoil: here's how you do it!</p> <p>To work on pytoil you'll need python &gt;=3.9</p>"},{"location":"contributing/contributing.html#step-1-fork-pytoil","title":"Step 1: Fork pytoil","text":"<p>The first thing to do is 'fork' pytoil. This will put a version of it on your GitHub page. This means you can change that fork all you want and the actual version of pytoil still works!</p> <p>To create a fork, go to the pytoil repo and click on the fork button!</p>"},{"location":"contributing/contributing.html#step-2-clone-your-fork","title":"Step 2: Clone your fork","text":"<p>Navigate to where you do your development work on your machine and open a terminal</p> <p>If you use HTTPS:</p> <pre><code>git clone https://github.com/&lt;your_github_username&gt;/pytoil.git\n</code></pre> <p>If you use SSH:</p> <pre><code>git clone git@github.com:&lt;your_github_username&gt;/pytoil.git\n</code></pre> <p>Or you can be really fancy and use the GH CLI</p> <pre><code>gh repo clone &lt;your_github_username&gt;/pytoil\n</code></pre> <p>HTTPS is probably the one most people use!</p> <p>Once you've cloned the project, cd into it...</p> <pre><code>cd pytoil\n</code></pre> <p>This will take you into the root directory of the project.</p> <p>Now add the original pytoil repo as an upstream in your forked project:</p> <pre><code>git remote add upstream https://github.com/FollowTheProcess/pytoil.git\n</code></pre> <p>This makes the original version of pytoil <code>upstream</code> but not <code>origin</code>. Basically, this means that if your working on it for a while and the original project has changed in the meantime, you can do:</p> <pre><code>git checkout main\ngit fetch upstream\ngit merge upstream/main\ngit push origin main\n</code></pre> <p>This will (in order):</p> <ul> <li>Checkout the main branch of your locally cloned fork</li> <li>Fetch any changes from the original project that have happened since you forked it</li> <li>Merge those changes in with what you have</li> <li>Push those changes up to your fork so your fork stays up to date with the original.</li> </ul> <p>Note</p> <p>Good practice is to do this before you start doing anything every time you start work, then the chances of you getting conflicting commits later on is much lower!</p>"},{"location":"contributing/contributing.html#step-3-create-the-environment","title":"Step 3: Create the Environment","text":"<p>Before you do anything, you'll want to set up your development environment...</p> <p>pytoil uses hatch for project management and task automation.</p> <p>I recommend using pipx for python command line tools like these, it installs each tool in it's own isolated environment but exposes the command to your terminal as if you installed it globally. To install hatch with pipx:</p> <pre><code>pipx install hatch\n</code></pre> <p>To get started all you need to do is run:</p> <pre><code>hatch env create\n</code></pre> <p>When you run this, hatch will create a virtual environment for you and install all the dependencies you need to develop pytoil</p> <p>Not bad for a single command! Doing it this way means that before you start working on pytoil you know its all been installed and works correctly.</p> <p>Wait for it to do it's thing and then you can get started.</p> <p>Tip</p> <p>If you run <code>hatch env show</code> it will show you all the different environments and the things you can do in them.</p>"},{"location":"contributing/contributing.html#step-4-do-your-thing","title":"Step 4: Do your thing","text":"<p>Always checkout a new branch before changing anything</p> <pre><code>git switch --create &lt;name-of-your-bugfix-or-feature&gt;\n</code></pre> <p>Now you're ready to start working!</p> <p>Remember! pytoil aims for high test coverage. If you implement a new feature, make sure to write tests for it! Similarly, if you fix a bug, it's good practice to write a test that would have caught that bug so we can be sure it doesn't reappear in the future!</p> <p>The tasks for automated testing, building the docs, formatting and linting etc. are all defined in hatch So when you've made your changes, just run:</p> <pre><code>hatch run check\n</code></pre> <p>And it will tell you if something's wrong!</p>"},{"location":"contributing/contributing.html#step-5-commit-your-changes","title":"Step 5: Commit your changes","text":"<p>Once you're happy with what you've done, add the files you've changed:</p> <pre><code>git add &lt;changed-file(s)&gt;\n\n# Might be easier to do\ngit add -A\n\n# But be wary of this and check what it's added is what you wanted..\ngit status\n</code></pre> <p>Commit your changes:</p> <pre><code>git commit\n\n# Now write a good commit message explaining what you've done and why.\n</code></pre> <p>While you were working on your changes, the original project might have changed (due to other people working on it). So first, you should rebase your current branch from the upstream destination. Doing this means that when you do your PR, it's all compatible:</p> <pre><code>git pull --rebase upstream main\n</code></pre> <p>Now push your changes to your fork:</p> <pre><code>git push origin &lt;your-branch-name&gt;\n</code></pre>"},{"location":"contributing/contributing.html#step-6-create-a-pull-request","title":"Step 6: Create a Pull Request","text":"<p>Now go to the original pytoil repo and create a Pull Request. Make sure to choose upstream repo \"main\" as the destination branch and your forked repo \"your-branch-name\" as the source.</p> <p>That's it! Your code will be tested automatically by pytoil's CI suite and if everything passes and your PR is approved and merged then it will become part of pytoil!</p> <p>Note</p> <p>There is a good guide to open source contribution workflow [here] and also [here too]</p>"},{"location":"contributing/contributing.html#contributing-to-docs","title":"Contributing to Docs","text":"<p>Any improvements to the documentation are always appreciated! pytoil uses mkdocs with the mkdocs-material theme so the documentation is all written in markdown and can be found in the <code>docs</code> folder in the project root.</p> <p>Because pytoil uses hatch, things like building and serving the documentation is super easy. All you have to do is:</p> <pre><code># Builds the docs\nhatch run docs:build\n\n# Builds and serves\nhatch run docs:serve\n</code></pre> <p>If you use the <code>serve</code> option, you can navigate to the localhost IP address it gives you and as you make changes to the source files, it will automatically reload your browser! Automation is power! </p> <p>If you add pages to the docs, make sure they are placed in the nav tree in the <code>mkdocs.yml</code> file and you're good to go!</p>"}]}